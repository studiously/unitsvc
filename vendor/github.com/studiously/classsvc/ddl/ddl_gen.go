// Code generated by go-bindata.
// sources:
// ddl.go
// ddl_gen.go
// postgres/1_init.sql
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ddlGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x14\xc9\xc1\x09\x80\x30\x0c\x05\xd0\x7b\xa7\xc8\x02\x4d\xee\x2e\x23\xd1\x7c\x3e\x52\x49\x8a\x74\x7f\xa4\xa7\x77\x78\x66\xac\x83\x48\x7c\xbe\x20\xac\x7e\x3d\x19\xbe\x5c\xfa\x1c\x94\x88\x57\x7a\x6d\x4e\x22\x95\x25\x6a\xaa\xda\xa6\xdf\xc3\x89\x1d\xed\x0f\x00\x00\xff\xff\xef\x5c\x6f\xa3\x42\x00\x00\x00")

func ddlGoBytes() ([]byte, error) {
	return bindataRead(
		_ddlGo,
		"ddl.go",
	)
}

func ddlGo() (*asset, error) {
	bytes, err := ddlGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ddl.go", size: 66, mode: os.FileMode(420), modTime: time.Unix(1495558171, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ddl_genGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func ddl_genGoBytes() ([]byte, error) {
	return bindataRead(
		_ddl_genGo,
		"ddl_gen.go",
	)
}

func ddl_genGo() (*asset, error) {
	bytes, err := ddl_genGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ddl_gen.go", size: 0, mode: os.FileMode(436), modTime: time.Unix(1495995952, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xcd\xae\x9b\x30\x10\x85\xf7\x7e\x8a\x51\x36\x10\x35\xf7\x05\x2e\x2b\x07\x0f\x57\xa8\xbe\x86\x1a\x5b\x4a\x56\x88\x12\xab\x45\x0a\xa4\x32\xd0\xf4\xf1\x2b\xd3\x38\x90\x9f\x4a\x61\x83\x34\x73\xe6\xf8\xf3\xb1\xfd\xf6\x06\x5f\xda\xe6\x87\xad\x06\x03\xfa\x17\x89\x25\x52\x85\xa0\xf6\x39\x82\x2e\x50\x96\x32\xe3\x08\xb4\x00\x14\xfa\x13\xc2\xa0\x1f\xc6\x83\xe9\x86\x60\x03\xc1\x60\xaa\xfa\xa7\xb1\xc1\x3a\x22\xd7\x31\xba\xe5\x08\xf5\xb1\xea\x7b\xd3\x43\x48\x00\x9a\x03\xcc\x9f\xd6\x29\x73\x7f\x91\x29\x10\x9a\x73\xc8\x65\xfa\x49\xe5\x1e\xbe\xe2\x7e\x43\x00\xba\xaa\x35\x57\xb1\xc2\x9d\x5a\x8a\x9d\xa0\x1e\xad\x35\xdd\x50\x8e\x5d\x33\x4c\x6e\xae\x58\xd5\x43\xf3\xdb\xcf\x6d\xb3\x8c\x23\x15\xf3\x12\xc0\x30\xa1\x9a\x2b\x50\x52\x23\x71\xac\xb7\xb0\xad\x69\xbf\x1b\x7b\x07\xeb\x41\xff\x8f\x3a\xf6\xc6\x96\x4e\xff\x28\x9d\x40\x5d\x04\xae\xff\xbc\x6d\x4f\xc7\x7f\xc0\x73\xc4\x8f\xc0\xd7\xac\xe1\xfd\x7d\x16\xba\xf1\xd3\xb9\x33\x76\xb9\x5b\x78\x32\x9e\x50\x5e\x4c\xea\x24\x93\x98\x7e\x08\x47\x0e\xe1\xca\x93\xad\xd6\x20\x31\x41\x89\x22\xc6\x62\x3e\xb2\xd5\xd4\xc9\x04\x30\xe4\xa8\x10\x62\x5a\xc4\x94\xa1\xab\xe8\x9c\xd1\xb9\x42\x16\xc7\x9e\x0a\x86\x3b\x9f\x64\xe9\x57\x28\x9b\xc3\x1f\x02\x6e\xd2\x67\xac\x8b\x54\x7c\xc0\x56\x49\x44\x08\xbd\x6c\x1d\x79\x1b\x2d\xd2\x6f\xfa\xde\xed\x12\xf4\xab\xae\x17\xf9\x06\x1e\xed\x9f\xfb\xbe\x64\xe7\xf6\xba\x7c\x28\xec\x74\xee\x08\x93\x59\x7e\x7b\xe3\xa3\x65\xed\xe2\xe7\x6b\x37\x0f\x2a\xfa\x1b\x00\x00\xff\xff\x4c\x22\x80\x0e\x76\x03\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 886, mode: os.FileMode(420), modTime: time.Unix(1495995950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ddl.go": ddlGo,
	"ddl_gen.go": ddl_genGo,
	"postgres/1_init.sql": postgres1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ddl.go": &bintree{ddlGo, map[string]*bintree{}},
	"ddl_gen.go": &bintree{ddl_genGo, map[string]*bintree{}},
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

