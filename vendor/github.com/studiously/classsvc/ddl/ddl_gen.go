// Code generated by go-bindata.
// sources:
// ddl.go
// ddl_gen.go
// postgres/1_init.sql
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ddlGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x14\xc9\xc1\x09\x80\x30\x0c\x05\xd0\x7b\xa7\xc8\x02\x4d\xee\x2e\x23\xd1\x7c\x3e\x52\x49\x8a\x74\x7f\xa4\xa7\x77\x78\x66\xac\x83\x48\x7c\xbe\x20\xac\x7e\x3d\x19\xbe\x5c\xfa\x1c\x94\x88\x57\x7a\x6d\x4e\x22\x95\x25\x6a\xaa\xda\xa6\xdf\xc3\x89\x1d\xed\x0f\x00\x00\xff\xff\xef\x5c\x6f\xa3\x42\x00\x00\x00")

func ddlGoBytes() ([]byte, error) {
	return bindataRead(
		_ddlGo,
		"ddl.go",
	)
}

func ddlGo() (*asset, error) {
	bytes, err := ddlGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ddl.go", size: 66, mode: os.FileMode(420), modTime: time.Unix(1495558171, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ddl_genGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func ddl_genGoBytes() ([]byte, error) {
	return bindataRead(
		_ddl_genGo,
		"ddl_gen.go",
	)
}

func ddl_genGo() (*asset, error) {
	bytes, err := ddl_genGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ddl_gen.go", size: 0, mode: os.FileMode(436), modTime: time.Unix(1496357415, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xcf\x8e\x9b\x30\x10\xc6\xef\x7e\x8a\x51\x2e\x10\x35\xfb\x02\xcb\xc9\xc1\xc3\x0a\xd5\x6b\xa8\xb1\xa5\xcd\x09\x51\x62\xb5\x48\x81\x54\x06\x9a\x3e\x7e\xe5\x24\x06\xf2\xe7\x90\x5c\x22\xcd\x7c\xf3\xf9\x37\x9f\xf1\xdb\x1b\x7c\x6b\x9b\x5f\xb6\x1a\x0c\xe8\x3f\x24\x96\x48\x15\x82\xda\xe5\x08\xba\x40\x59\xca\x8c\x23\xd0\x02\x50\xe8\x4f\x08\x83\x7e\x18\xf7\xa6\x1b\x82\x0d\x04\x83\xa9\xea\xdf\xc6\x06\xeb\x88\x4c\x63\x74\xcb\x11\xea\x43\xd5\xf7\xa6\x87\x90\x00\x34\x7b\x98\x7f\x5a\xa7\xcc\xfd\x8b\x4c\x81\xd0\x9c\x43\x2e\xd3\x4f\x2a\x77\xf0\x1d\x77\x1b\x02\xd0\x55\xad\x99\xc4\x0a\xbf\xd4\x52\xec\x04\xf5\x68\xad\xe9\x86\x72\xec\x9a\xe1\xec\xe6\x8a\x55\x3d\x34\x7f\xfd\xdc\x36\xcb\x38\x52\x31\x1f\x01\x0c\x13\xaa\xb9\x02\x25\x35\x12\xc7\x7a\x0b\xdb\x9a\xf6\xa7\xb1\x17\xd8\xb1\x37\xb6\x74\xc4\x1e\xf4\xee\x74\xb7\x97\xeb\x3f\x6f\xdb\xe3\xe1\x42\x31\xe7\xf6\x48\x31\x05\x08\xef\xef\xb3\xd0\x8d\x1f\x4f\x9d\xb1\xcb\x15\xe0\xc9\x78\x42\x79\x71\x56\x2f\x92\x0b\xaf\xd8\x9b\x09\x70\xed\x14\x49\x26\x31\xfd\x10\x4e\x01\xe1\xca\xb7\x56\x6b\x90\x98\xa0\x44\x11\x63\x31\xdf\xd4\xea\xdc\xc9\x04\x30\xe4\xa8\x10\x62\x5a\xc4\x94\xa1\xab\xe8\x9c\xd1\xb9\x42\x16\xb7\x9d\x0a\x86\x5f\x3e\xc0\xd2\x9f\x50\x36\xfb\x7f\x04\xdc\xa4\x8f\x56\x17\xa9\xf8\x80\xad\x92\x88\x10\x4e\x8c\x91\xb7\xd1\x22\xfd\xa1\xef\xdd\xae\x3b\xbd\xea\xfa\x18\x41\xf4\x9c\xd2\xfb\xbe\x64\xe7\x76\x5d\xbe\x0f\x76\x3c\x75\x84\xc9\x2c\xbf\xfd\xd0\xa3\x65\xed\xea\xe7\x6b\x37\xef\x28\xfa\x1f\x00\x00\xff\xff\x23\x45\xde\x14\x6d\x03\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 877, mode: os.FileMode(420), modTime: time.Unix(1496357414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ddl.go": ddlGo,
	"ddl_gen.go": ddl_genGo,
	"postgres/1_init.sql": postgres1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ddl.go": &bintree{ddlGo, map[string]*bintree{}},
	"ddl_gen.go": &bintree{ddl_genGo, map[string]*bintree{}},
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

